"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .bookings import Bookings
from .payments import Payments
from .sdkconfiguration import SDKConfiguration
from .stations import Stations
from .trips import Trips
from traintravel import utils
from traintravel._hooks import SDKHooks
from traintravel.models import components
from typing import Callable, Dict, Optional, Union

class Traintravel:
    r"""Train Travel API: API for finding and booking train trips across Europe."""
    stations: Stations
    r"""Find and filter train stations across Europe, including their location  and local timezone."""
    trips: Trips
    r"""Timetables and routes for train trips between stations, including  pricing and availability."""
    bookings: Bookings
    r"""Create and manage bookings for train trips, including passenger  details and optional extras."""
    payments: Payments
    r"""Pay for bookings using a card or bank account, and view payment
    status and history.

    > warn
    > Bookings usually expire within 1 hour so you'll need to make your payment before the expiry date
    """

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 o_auth2: Union[str, Callable[[], str]],
                 server_idx: Optional[int] = None,
                 server_url: Optional[str] = None,
                 url_params: Optional[Dict[str, str]] = None,
                 client: Optional[requests_http.Session] = None,
                 retry_config: Optional[utils.RetryConfig] = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.

        :param o_auth2: The o_auth2 required for authentication
        :type o_auth2: Union[str, Callable[[], str]]
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()

        if callable(o_auth2):
            def security():
                return components.Security(o_auth2 = o_auth2())
        else:
            security = components.Security(o_auth2 = o_auth2)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(
            client,
            security,
            server_url,
            server_idx,
            retry_config=retry_config
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration._hooks = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.stations = Stations(self.sdk_configuration)
        self.trips = Trips(self.sdk_configuration)
        self.bookings = Bookings(self.sdk_configuration)
        self.payments = Payments(self.sdk_configuration)
