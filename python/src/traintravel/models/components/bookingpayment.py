"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from traintravel import utils
from typing import Final, Optional, Union

class Currency(str, Enum):
    r"""Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase."""
    BAM = 'bam'
    BGN = 'bgn'
    CHF = 'chf'
    EUR = 'eur'
    GBP = 'gbp'
    NOK = 'nok'
    SEK = 'sek'
    TRY = 'try'

class AccountType(str, Enum):
    r"""The type of entity that holds the account. This can be either `individual` or `company`."""
    INDIVIDUAL = 'individual'
    COMPANY = 'company'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BankAccount:
    r"""A bank account to take payment from. Must be able to make payments in the currency specified in the payment."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""The account number for the bank account, in string form. Must be a current account."""
    account_type: AccountType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_type') }})
    r"""The type of entity that holds the account. This can be either `individual` or `company`."""
    bank_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_name') }})
    r"""The name of the bank associated with the routing number."""
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Two-letter country code (ISO 3166-1 alpha-2)."""
    OBJECT: Final[Optional[str]] = dataclasses.field(default='bank_account', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object'), 'exclude': lambda f: f is None }})
    sort_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_code'), 'exclude': lambda f: f is None }})
    r"""The sort code for the bank account, in string form. Must be a six-digit number."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Card:
    r"""A card (debit or credit) to take payment from."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Cardholder's full name as it appears on the card."""
    number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""The card number, as a string without any separators. On read all but the last four digits will be masked for security."""
    cvc: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvc') }})
    r"""Card security code, 3 or 4 digits usually found on the back of the card."""
    exp_month: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp_month') }})
    r"""Two-digit number representing the card's expiration month."""
    exp_year: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp_year') }})
    r"""Four-digit number representing the card's expiration year."""
    address_country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_country') }})
    OBJECT: Final[Optional[str]] = dataclasses.field(default='card', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object'), 'exclude': lambda f: f is None }})
    address_line1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line1'), 'exclude': lambda f: f is None }})
    address_line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line2'), 'exclude': lambda f: f is None }})
    address_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_city'), 'exclude': lambda f: f is None }})
    address_post_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_post_code'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingPayment:
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Amount intended to be collected by this payment. A positive decimal figure describing the amount to be collected."""
    currency: Optional[Currency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase."""
    source: Optional[Union[Card, BankAccount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking."""
    

