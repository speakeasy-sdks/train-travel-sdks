"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ...models.components import httpmetadata as components_httpmetadata
from ...models.components import station as components_station
from dataclasses_json import Undefined, dataclass_json
from traintravel import utils
from typing import Dict, List, Optional


@dataclasses.dataclass
class GetStationsLinks:
    self_: Optional[str] = dataclasses.field(default=None)
    next: Optional[str] = dataclasses.field(default=None)
    prev: Optional[str] = dataclasses.field(default=None)
    



@dataclasses.dataclass
class GetStationsStationsResponseBody:
    r"""This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS)."""
    data: Optional[List[components_station.Station]] = dataclasses.field(default=None)
    links: Optional[GetStationsLinks] = dataclasses.field(default=None)
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Links:
    self_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self'), 'exclude': lambda f: f is None }})
    next: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next'), 'exclude': lambda f: f is None }})
    prev: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prev'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetStationsResponseBody:
    r"""This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS)."""
    data: Optional[List[components_station.Station]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    links: Optional[Links] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})
    



@dataclasses.dataclass
class GetStationsResponse:
    http_meta: components_httpmetadata.HTTPMetadata = dataclasses.field()
    headers: Dict[str, List[str]] = dataclasses.field()
    two_hundred_application_json_object: Optional[GetStationsResponseBody] = dataclasses.field(default=None)
    r"""A list of train stations"""
    body: Optional[bytes] = dataclasses.field(default=None)
    

