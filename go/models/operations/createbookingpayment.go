// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"traintravel/internal/utils"
	"traintravel/models/components"
	"traintravel/types"
)

type CreateBookingPaymentRequest struct {
	// The ID of the booking to pay for.
	BookingID      string                     `pathParam:"style=simple,explode=false,name=bookingId"`
	BookingPayment *components.BookingPayment `request:"mediaType=application/json"`
}

func (o *CreateBookingPaymentRequest) GetBookingID() string {
	if o == nil {
		return ""
	}
	return o.BookingID
}

func (o *CreateBookingPaymentRequest) GetBookingPayment() *components.BookingPayment {
	if o == nil {
		return nil
	}
	return o.BookingPayment
}

// Currency - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
type Currency string

const (
	CurrencyBam Currency = "bam"
	CurrencyBgn Currency = "bgn"
	CurrencyChf Currency = "chf"
	CurrencyEur Currency = "eur"
	CurrencyGbp Currency = "gbp"
	CurrencyNok Currency = "nok"
	CurrencySek Currency = "sek"
	CurrencyTry Currency = "try"
)

func (e Currency) ToPointer() *Currency {
	return &e
}

func (e *Currency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bam":
		fallthrough
	case "bgn":
		fallthrough
	case "chf":
		fallthrough
	case "eur":
		fallthrough
	case "gbp":
		fallthrough
	case "nok":
		fallthrough
	case "sek":
		fallthrough
	case "try":
		*e = Currency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Currency: %v", v)
	}
}

// AccountType - The type of entity that holds the account. This can be either `individual` or `company`.
type AccountType string

const (
	AccountTypeIndividual AccountType = "individual"
	AccountTypeCompany    AccountType = "company"
)

func (e AccountType) ToPointer() *AccountType {
	return &e
}

func (e *AccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "company":
		*e = AccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountType: %v", v)
	}
}

// BankAccount - A bank account to take payment from. Must be able to make payments in the currency specified in the payment.
type BankAccount struct {
	object *string `const:"bank_account" json:"object,omitempty"`
	Name   string  `json:"name"`
	// The account number for the bank account, in string form. Must be a current account.
	Number string `json:"number"`
	// The sort code for the bank account, in string form. Must be a six-digit number.
	SortCode *string `json:"sort_code,omitempty"`
	// The type of entity that holds the account. This can be either `individual` or `company`.
	AccountType AccountType `json:"account_type"`
	// The name of the bank associated with the routing number.
	BankName string `json:"bank_name"`
	// Two-letter country code (ISO 3166-1 alpha-2).
	Country string `json:"country"`
}

func (b BankAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BankAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *BankAccount) GetObject() *string {
	return types.String("bank_account")
}

func (o *BankAccount) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *BankAccount) GetNumber() string {
	if o == nil {
		return ""
	}
	return o.Number
}

func (o *BankAccount) GetSortCode() *string {
	if o == nil {
		return nil
	}
	return o.SortCode
}

func (o *BankAccount) GetAccountType() AccountType {
	if o == nil {
		return AccountType("")
	}
	return o.AccountType
}

func (o *BankAccount) GetBankName() string {
	if o == nil {
		return ""
	}
	return o.BankName
}

func (o *BankAccount) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

// Card - A card (debit or credit) to take payment from.
type Card struct {
	object *string `const:"card" json:"object,omitempty"`
	// Cardholder's full name as it appears on the card.
	Name string `json:"name"`
	// The card number, as a string without any separators. On read all but the last four digits will be masked for security.
	Number string `json:"number"`
	// Two-digit number representing the card's expiration month.
	ExpMonth int64 `json:"exp_month"`
	// Four-digit number representing the card's expiration year.
	ExpYear         int64   `json:"exp_year"`
	AddressCity     *string `json:"address_city,omitempty"`
	AddressCountry  string  `json:"address_country"`
	AddressPostCode *string `json:"address_post_code,omitempty"`
}

func (c Card) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Card) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Card) GetObject() *string {
	return types.String("card")
}

func (o *Card) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Card) GetNumber() string {
	if o == nil {
		return ""
	}
	return o.Number
}

func (o *Card) GetExpMonth() int64 {
	if o == nil {
		return 0
	}
	return o.ExpMonth
}

func (o *Card) GetExpYear() int64 {
	if o == nil {
		return 0
	}
	return o.ExpYear
}

func (o *Card) GetAddressCity() *string {
	if o == nil {
		return nil
	}
	return o.AddressCity
}

func (o *Card) GetAddressCountry() string {
	if o == nil {
		return ""
	}
	return o.AddressCountry
}

func (o *Card) GetAddressPostCode() *string {
	if o == nil {
		return nil
	}
	return o.AddressPostCode
}

type SourceType string

const (
	SourceTypeCard        SourceType = "Card"
	SourceTypeBankAccount SourceType = "Bank Account"
)

// Source - The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking.
type Source struct {
	Card        *Card
	BankAccount *BankAccount

	Type SourceType
}

func CreateSourceCard(card Card) Source {
	typ := SourceTypeCard

	return Source{
		Card: &card,
		Type: typ,
	}
}

func CreateSourceBankAccount(bankAccount BankAccount) Source {
	typ := SourceTypeBankAccount

	return Source{
		BankAccount: &bankAccount,
		Type:        typ,
	}
}

func (u *Source) UnmarshalJSON(data []byte) error {

	bankAccount := BankAccount{}
	if err := utils.UnmarshalJSON(data, &bankAccount, "", true, true); err == nil {
		u.BankAccount = &bankAccount
		u.Type = SourceTypeBankAccount
		return nil
	}

	card := Card{}
	if err := utils.UnmarshalJSON(data, &card, "", true, true); err == nil {
		u.Card = &card
		u.Type = SourceTypeCard
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Source) MarshalJSON() ([]byte, error) {
	if u.Card != nil {
		return utils.MarshalJSON(u.Card, "", true)
	}

	if u.BankAccount != nil {
		return utils.MarshalJSON(u.BankAccount, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// Status - The status of the payment, one of `pending`, `succeeded`, or `failed`.
type Status string

const (
	StatusPending   Status = "pending"
	StatusSucceeded Status = "succeeded"
	StatusFailed    Status = "failed"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// CreateBookingPaymentResponseBody - Payment successful
type CreateBookingPaymentResponseBody struct {
	// Unique identifier for the payment. This will be a unique identifier for the payment, and is used to reference the payment in other objects.
	ID *string `json:"id,omitempty"`
	// Amount intended to be collected by this payment. A positive decimal figure describing the amount to be collected.
	Amount *float64 `json:"amount,omitempty"`
	// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency *Currency `json:"currency,omitempty"`
	// The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking.
	Source *Source `json:"source,omitempty"`
	// The status of the payment, one of `pending`, `succeeded`, or `failed`.
	Status *Status                  `json:"status,omitempty"`
	Links  *components.LinksBooking `json:"links,omitempty"`
}

func (o *CreateBookingPaymentResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateBookingPaymentResponseBody) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreateBookingPaymentResponseBody) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreateBookingPaymentResponseBody) GetSource() *Source {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CreateBookingPaymentResponseBody) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateBookingPaymentResponseBody) GetLinks() *components.LinksBooking {
	if o == nil {
		return nil
	}
	return o.Links
}

type CreateBookingPaymentResponse struct {
	HTTPMeta components.HTTPMetadata
	// Payment successful
	Object  *CreateBookingPaymentResponseBody
	Headers map[string][]string
}

func (o *CreateBookingPaymentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateBookingPaymentResponse) GetObject() *CreateBookingPaymentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *CreateBookingPaymentResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
