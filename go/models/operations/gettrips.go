// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"time"
	"traintravel/internal/utils"
	"traintravel/models/components"
)

type GetTripsRequest struct {
	// The ID of the origin station
	Origin string `queryParam:"style=form,explode=true,name=origin"`
	// The ID of the destination station
	Destination string `queryParam:"style=form,explode=true,name=destination"`
	// The date and time of the trip in ISO 8601 format in origin station's timezone.
	Date time.Time `queryParam:"style=form,explode=true,name=date"`
	// Only return trips where bicycles are known to be allowed
	Bicycles *bool `default:"false" queryParam:"style=form,explode=true,name=bicycles"`
	// Only return trips where dogs are known to be allowed
	Dogs *bool `default:"false" queryParam:"style=form,explode=true,name=dogs"`
}

func (g GetTripsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetTripsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetTripsRequest) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

func (o *GetTripsRequest) GetDestination() string {
	if o == nil {
		return ""
	}
	return o.Destination
}

func (o *GetTripsRequest) GetDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Date
}

func (o *GetTripsRequest) GetBicycles() *bool {
	if o == nil {
		return nil
	}
	return o.Bicycles
}

func (o *GetTripsRequest) GetDogs() *bool {
	if o == nil {
		return nil
	}
	return o.Dogs
}

type GetTripsTripsLinks struct {
	Self *string
	Next *string
	Prev *string
}

func (o *GetTripsTripsLinks) GetSelf() *string {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetTripsTripsLinks) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetTripsTripsLinks) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

// GetTripsTripsResponseBody - This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS).
type GetTripsTripsResponseBody struct {
	Data  []components.Trip
	Links *GetTripsTripsLinks
}

func (o *GetTripsTripsResponseBody) GetData() []components.Trip {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *GetTripsTripsResponseBody) GetLinks() *GetTripsTripsLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetTripsLinks struct {
	Self *string `json:"self,omitempty"`
	Next *string `json:"next,omitempty"`
	Prev *string `json:"prev,omitempty"`
}

func (o *GetTripsLinks) GetSelf() *string {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetTripsLinks) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetTripsLinks) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

// GetTripsResponseBody - This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS).
type GetTripsResponseBody struct {
	Data  []components.Trip `json:"data,omitempty"`
	Links *GetTripsLinks    `json:"links,omitempty"`
}

func (o *GetTripsResponseBody) GetData() []components.Trip {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *GetTripsResponseBody) GetLinks() *GetTripsLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetTripsResponse struct {
	HTTPMeta components.HTTPMetadata
	// A list of available train trips
	TwoHundredApplicationJSONObject *GetTripsResponseBody
	Body                            []byte
	Headers                         map[string][]string
}

func (o *GetTripsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTripsResponse) GetTwoHundredApplicationJSONObject() *GetTripsResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetTripsResponse) GetBody() []byte {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *GetTripsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
