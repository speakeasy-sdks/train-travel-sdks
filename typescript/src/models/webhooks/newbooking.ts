/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type NewBookingResponse = {
    httpMeta: components.HTTPMetadata;
    headers: Record<string, Array<string>>;
};

export type Links = {
    self?: string | undefined;
    next?: string | undefined;
    prev?: string | undefined;
};

export type NewBookingRequestBody = {
    /**
     * Identifier of the booked trip
     */
    tripId?: string | undefined;
    /**
     * Name of the passenger
     */
    passengerName?: string | undefined;
    /**
     * Indicates whether the passenger has a bicycle.
     */
    hasBicycle?: boolean | undefined;
    /**
     * Indicates whether the passenger has a dog.
     */
    hasDog?: boolean | undefined;
    links?: Links | undefined;
};

/** @internal */
export namespace NewBookingResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Headers: Record<string, Array<string>>;
    };

    export const inboundSchema: z.ZodType<NewBookingResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Headers: Record<string, Array<string>>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewBookingResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                Headers: v.headers,
            };
        });
}

/** @internal */
export namespace Links$ {
    export type Inbound = {
        self?: string | undefined;
        next?: string | undefined;
        prev?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Links, z.ZodTypeDef, Inbound> = z
        .object({
            self: z.string().optional(),
            next: z.string().optional(),
            prev: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.self === undefined ? null : { self: v.self }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.prev === undefined ? null : { prev: v.prev }),
            };
        });

    export type Outbound = {
        self?: string | undefined;
        next?: string | undefined;
        prev?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Links> = z
        .object({
            self: z.string().optional(),
            next: z.string().optional(),
            prev: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.self === undefined ? null : { self: v.self }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.prev === undefined ? null : { prev: v.prev }),
            };
        });
}

/** @internal */
export namespace NewBookingRequestBody$ {
    export type Inbound = {
        trip_id?: string | undefined;
        passenger_name?: string | undefined;
        has_bicycle?: boolean | undefined;
        has_dog?: boolean | undefined;
        links?: Links$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<NewBookingRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            trip_id: z.string().optional(),
            passenger_name: z.string().optional(),
            has_bicycle: z.boolean().optional(),
            has_dog: z.boolean().optional(),
            links: z.lazy(() => Links$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.trip_id === undefined ? null : { tripId: v.trip_id }),
                ...(v.passenger_name === undefined ? null : { passengerName: v.passenger_name }),
                ...(v.has_bicycle === undefined ? null : { hasBicycle: v.has_bicycle }),
                ...(v.has_dog === undefined ? null : { hasDog: v.has_dog }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });

    export type Outbound = {
        trip_id?: string | undefined;
        passenger_name?: string | undefined;
        has_bicycle?: boolean | undefined;
        has_dog?: boolean | undefined;
        links?: Links$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewBookingRequestBody> = z
        .object({
            tripId: z.string().optional(),
            passengerName: z.string().optional(),
            hasBicycle: z.boolean().optional(),
            hasDog: z.boolean().optional(),
            links: z.lazy(() => Links$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.tripId === undefined ? null : { trip_id: v.tripId }),
                ...(v.passengerName === undefined ? null : { passenger_name: v.passengerName }),
                ...(v.hasBicycle === undefined ? null : { has_bicycle: v.hasBicycle }),
                ...(v.hasDog === undefined ? null : { has_dog: v.hasDog }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });
}
