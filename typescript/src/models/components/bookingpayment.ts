/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
 */
export enum Currency {
    Bam = "bam",
    Bgn = "bgn",
    Chf = "chf",
    Eur = "eur",
    Gbp = "gbp",
    Nok = "nok",
    Sek = "sek",
    Try = "try",
}

/**
 * The type of entity that holds the account. This can be either `individual` or `company`.
 */
export enum AccountType {
    Individual = "individual",
    Company = "company",
}

/**
 * A bank account to take payment from. Must be able to make payments in the currency specified in the payment.
 */
export type BankAccount = {
    object?: "bank_account" | undefined;
    name: string;
    /**
     * The account number for the bank account, in string form. Must be a current account.
     */
    number: string;
    /**
     * The sort code for the bank account, in string form. Must be a six-digit number.
     */
    sortCode?: string | undefined;
    /**
     * The type of entity that holds the account. This can be either `individual` or `company`.
     */
    accountType: AccountType;
    /**
     * The name of the bank associated with the routing number.
     */
    bankName: string;
    /**
     * Two-letter country code (ISO 3166-1 alpha-2).
     */
    country: string;
};

/**
 * A card (debit or credit) to take payment from.
 */
export type Card = {
    object?: "card" | undefined;
    /**
     * Cardholder's full name as it appears on the card.
     */
    name: string;
    /**
     * The card number, as a string without any separators. On read all but the last four digits will be masked for security.
     */
    number: string;
    /**
     * Card security code, 3 or 4 digits usually found on the back of the card.
     */
    cvc: number;
    /**
     * Two-digit number representing the card's expiration month.
     */
    expMonth: number;
    /**
     * Four-digit number representing the card's expiration year.
     */
    expYear: number;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressCity?: string | undefined;
    addressCountry: string;
    addressPostCode?: string | undefined;
};

/**
 * The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking.
 */
export type Source = BankAccount | Card;

export type BookingPayment = {
    /**
     * Amount intended to be collected by this payment. A positive decimal figure describing the amount to be collected.
     */
    amount?: number | undefined;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
     */
    currency?: Currency | undefined;
    /**
     * The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking.
     */
    source?: BankAccount | Card | undefined;
};

/** @internal */
export const Currency$ = z.nativeEnum(Currency);

/** @internal */
export const AccountType$ = z.nativeEnum(AccountType);

/** @internal */
export namespace BankAccount$ {
    export type Inbound = {
        object?: "bank_account" | undefined;
        name: string;
        number: string;
        sort_code?: string | undefined;
        account_type: AccountType;
        bank_name: string;
        country: string;
    };

    export const inboundSchema: z.ZodType<BankAccount, z.ZodTypeDef, Inbound> = z
        .object({
            object: z.literal("bank_account").optional(),
            name: z.string(),
            number: z.string(),
            sort_code: z.string().optional(),
            account_type: AccountType$,
            bank_name: z.string(),
            country: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.object === undefined ? null : { object: v.object }),
                name: v.name,
                number: v.number,
                ...(v.sort_code === undefined ? null : { sortCode: v.sort_code }),
                accountType: v.account_type,
                bankName: v.bank_name,
                country: v.country,
            };
        });

    export type Outbound = {
        object: "bank_account";
        name: string;
        number: string;
        sort_code?: string | undefined;
        account_type: AccountType;
        bank_name: string;
        country: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BankAccount> = z
        .object({
            object: z.literal("bank_account").default("bank_account" as const),
            name: z.string(),
            number: z.string(),
            sortCode: z.string().optional(),
            accountType: AccountType$,
            bankName: z.string(),
            country: z.string(),
        })
        .transform((v) => {
            return {
                object: v.object,
                name: v.name,
                number: v.number,
                ...(v.sortCode === undefined ? null : { sort_code: v.sortCode }),
                account_type: v.accountType,
                bank_name: v.bankName,
                country: v.country,
            };
        });
}

/** @internal */
export namespace Card$ {
    export type Inbound = {
        object?: "card" | undefined;
        name: string;
        number: string;
        cvc: number;
        exp_month: number;
        exp_year: number;
        address_line1?: string | undefined;
        address_line2?: string | undefined;
        address_city?: string | undefined;
        address_country: string;
        address_post_code?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Card, z.ZodTypeDef, Inbound> = z
        .object({
            object: z.literal("card").optional(),
            name: z.string(),
            number: z.string(),
            cvc: z.number().int(),
            exp_month: z.number().int(),
            exp_year: z.number().int(),
            address_line1: z.string().optional(),
            address_line2: z.string().optional(),
            address_city: z.string().optional(),
            address_country: z.string(),
            address_post_code: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.object === undefined ? null : { object: v.object }),
                name: v.name,
                number: v.number,
                cvc: v.cvc,
                expMonth: v.exp_month,
                expYear: v.exp_year,
                ...(v.address_line1 === undefined ? null : { addressLine1: v.address_line1 }),
                ...(v.address_line2 === undefined ? null : { addressLine2: v.address_line2 }),
                ...(v.address_city === undefined ? null : { addressCity: v.address_city }),
                addressCountry: v.address_country,
                ...(v.address_post_code === undefined
                    ? null
                    : { addressPostCode: v.address_post_code }),
            };
        });

    export type Outbound = {
        object: "card";
        name: string;
        number: string;
        cvc: number;
        exp_month: number;
        exp_year: number;
        address_line1?: string | undefined;
        address_line2?: string | undefined;
        address_city?: string | undefined;
        address_country: string;
        address_post_code?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Card> = z
        .object({
            object: z.literal("card").default("card" as const),
            name: z.string(),
            number: z.string(),
            cvc: z.number().int(),
            expMonth: z.number().int(),
            expYear: z.number().int(),
            addressLine1: z.string().optional(),
            addressLine2: z.string().optional(),
            addressCity: z.string().optional(),
            addressCountry: z.string(),
            addressPostCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                object: v.object,
                name: v.name,
                number: v.number,
                cvc: v.cvc,
                exp_month: v.expMonth,
                exp_year: v.expYear,
                ...(v.addressLine1 === undefined ? null : { address_line1: v.addressLine1 }),
                ...(v.addressLine2 === undefined ? null : { address_line2: v.addressLine2 }),
                ...(v.addressCity === undefined ? null : { address_city: v.addressCity }),
                address_country: v.addressCountry,
                ...(v.addressPostCode === undefined
                    ? null
                    : { address_post_code: v.addressPostCode }),
            };
        });
}

/** @internal */
export namespace Source$ {
    export type Inbound = BankAccount$.Inbound | Card$.Inbound;

    export type Outbound = BankAccount$.Outbound | Card$.Outbound;
    export const inboundSchema: z.ZodType<Source, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => BankAccount$.inboundSchema),
        z.lazy(() => Card$.inboundSchema),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Source> = z.union([
        z.lazy(() => BankAccount$.outboundSchema),
        z.lazy(() => Card$.outboundSchema),
    ]);
}

/** @internal */
export namespace BookingPayment$ {
    export type Inbound = {
        amount?: number | undefined;
        currency?: Currency | undefined;
        source?: BankAccount$.Inbound | Card$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<BookingPayment, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number().optional(),
            currency: Currency$.optional(),
            source: z
                .union([
                    z.lazy(() => BankAccount$.inboundSchema),
                    z.lazy(() => Card$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.source === undefined ? null : { source: v.source }),
            };
        });

    export type Outbound = {
        amount?: number | undefined;
        currency?: Currency | undefined;
        source?: BankAccount$.Outbound | Card$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BookingPayment> = z
        .object({
            amount: z.number().optional(),
            currency: Currency$.optional(),
            source: z
                .union([
                    z.lazy(() => BankAccount$.outboundSchema),
                    z.lazy(() => Card$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.source === undefined ? null : { source: v.source }),
            };
        });
}
