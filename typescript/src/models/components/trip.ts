/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Trip = {
    /**
     * Unique identifier for the trip
     */
    id?: string | undefined;
    /**
     * The starting station of the trip
     */
    origin?: string | undefined;
    /**
     * The destination station of the trip
     */
    destination?: string | undefined;
    /**
     * The date and time when the trip departs
     */
    departureTime?: Date | undefined;
    /**
     * The date and time when the trip arrives
     */
    arrivalTime?: Date | undefined;
    /**
     * The name of the operator of the trip
     */
    operator?: string | undefined;
    /**
     * The cost of the trip
     */
    price?: number | undefined;
    /**
     * Indicates whether bicycles are allowed on the trip
     */
    bicyclesAllowed?: boolean | undefined;
    /**
     * Indicates whether dogs are allowed on the trip
     */
    dogsAllowed?: boolean | undefined;
};

/** @internal */
export namespace Trip$ {
    export type Inbound = {
        id?: string | undefined;
        origin?: string | undefined;
        destination?: string | undefined;
        departure_time?: string | undefined;
        arrival_time?: string | undefined;
        operator?: string | undefined;
        price?: number | undefined;
        bicycles_allowed?: boolean | undefined;
        dogs_allowed?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Trip, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            origin: z.string().optional(),
            destination: z.string().optional(),
            departure_time: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            arrival_time: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            operator: z.string().optional(),
            price: z.number().optional(),
            bicycles_allowed: z.boolean().optional(),
            dogs_allowed: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.origin === undefined ? null : { origin: v.origin }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.departure_time === undefined ? null : { departureTime: v.departure_time }),
                ...(v.arrival_time === undefined ? null : { arrivalTime: v.arrival_time }),
                ...(v.operator === undefined ? null : { operator: v.operator }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.bicycles_allowed === undefined
                    ? null
                    : { bicyclesAllowed: v.bicycles_allowed }),
                ...(v.dogs_allowed === undefined ? null : { dogsAllowed: v.dogs_allowed }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        origin?: string | undefined;
        destination?: string | undefined;
        departure_time?: string | undefined;
        arrival_time?: string | undefined;
        operator?: string | undefined;
        price?: number | undefined;
        bicycles_allowed?: boolean | undefined;
        dogs_allowed?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Trip> = z
        .object({
            id: z.string().optional(),
            origin: z.string().optional(),
            destination: z.string().optional(),
            departureTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            arrivalTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            operator: z.string().optional(),
            price: z.number().optional(),
            bicyclesAllowed: z.boolean().optional(),
            dogsAllowed: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.origin === undefined ? null : { origin: v.origin }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.departureTime === undefined ? null : { departure_time: v.departureTime }),
                ...(v.arrivalTime === undefined ? null : { arrival_time: v.arrivalTime }),
                ...(v.operator === undefined ? null : { operator: v.operator }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.bicyclesAllowed === undefined
                    ? null
                    : { bicycles_allowed: v.bicyclesAllowed }),
                ...(v.dogsAllowed === undefined ? null : { dogs_allowed: v.dogsAllowed }),
            };
        });
}
