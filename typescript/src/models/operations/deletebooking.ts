/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type DeleteBookingRequest = {
    /**
     * The ID of the booking to retrieve.
     */
    bookingId: string;
};

export type DeleteBookingResponse = {
    httpMeta: components.HTTPMetadata;
    headers: Record<string, Array<string>>;
};

/** @internal */
export namespace DeleteBookingRequest$ {
    export type Inbound = {
        bookingId: string;
    };

    export const inboundSchema: z.ZodType<DeleteBookingRequest, z.ZodTypeDef, Inbound> = z
        .object({
            bookingId: z.string(),
        })
        .transform((v) => {
            return {
                bookingId: v.bookingId,
            };
        });

    export type Outbound = {
        bookingId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteBookingRequest> = z
        .object({
            bookingId: z.string(),
        })
        .transform((v) => {
            return {
                bookingId: v.bookingId,
            };
        });
}

/** @internal */
export namespace DeleteBookingResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Headers: Record<string, Array<string>>;
    };

    export const inboundSchema: z.ZodType<DeleteBookingResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Headers: Record<string, Array<string>>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteBookingResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                Headers: v.headers,
            };
        });
}
