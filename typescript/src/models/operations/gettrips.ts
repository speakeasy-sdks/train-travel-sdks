/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

export type GetTripsRequest = {
    /**
     * The ID of the origin station
     */
    origin: string;
    /**
     * The ID of the destination station
     */
    destination: string;
    /**
     * The date and time of the trip in ISO 8601 format in origin station's timezone.
     */
    date: Date;
    /**
     * Only return trips where bicycles are known to be allowed
     */
    bicycles?: boolean | undefined;
    /**
     * Only return trips where dogs are known to be allowed
     */
    dogs?: boolean | undefined;
};

export type GetTripsTripsLinks = {
    self?: string | undefined;
    next?: string | undefined;
    prev?: string | undefined;
};

/**
 * This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS).
 */
export type GetTripsTripsResponseBody = {
    data?: Array<components.Trip> | undefined;
    links?: GetTripsTripsLinks | undefined;
};

export type GetTripsLinks = {
    self?: string | undefined;
    next?: string | undefined;
    prev?: string | undefined;
};

/**
 * This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS).
 */
export type GetTripsResponseBody = {
    data?: Array<components.Trip> | undefined;
    links?: GetTripsLinks | undefined;
};

export type GetTripsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A list of available train trips
     */
    twoHundredApplicationJsonObject?: GetTripsResponseBody | undefined;
    body?: Uint8Array | string | undefined;
    headers: Record<string, Array<string>>;
};

/** @internal */
export namespace GetTripsRequest$ {
    export type Inbound = {
        origin: string;
        destination: string;
        date: string;
        bicycles?: boolean | undefined;
        dogs?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTripsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            origin: z.string(),
            destination: z.string(),
            date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            bicycles: z.boolean().default(false),
            dogs: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                origin: v.origin,
                destination: v.destination,
                date: v.date,
                bicycles: v.bicycles,
                dogs: v.dogs,
            };
        });

    export type Outbound = {
        origin: string;
        destination: string;
        date: string;
        bicycles: boolean;
        dogs: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTripsRequest> = z
        .object({
            origin: z.string(),
            destination: z.string(),
            date: z.date().transform((v) => v.toISOString()),
            bicycles: z.boolean().default(false),
            dogs: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                origin: v.origin,
                destination: v.destination,
                date: v.date,
                bicycles: v.bicycles,
                dogs: v.dogs,
            };
        });
}

/** @internal */
export namespace GetTripsTripsLinks$ {
    export type Inbound = {
        self?: string | undefined;
        next?: string | undefined;
        prev?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetTripsTripsLinks, z.ZodTypeDef, Inbound> = z
        .object({
            self: z.string().optional(),
            next: z.string().optional(),
            prev: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.self === undefined ? null : { self: v.self }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.prev === undefined ? null : { prev: v.prev }),
            };
        });

    export type Outbound = {
        self?: string | undefined;
        next?: string | undefined;
        prev?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTripsTripsLinks> = z
        .object({
            self: z.string().optional(),
            next: z.string().optional(),
            prev: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.self === undefined ? null : { self: v.self }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.prev === undefined ? null : { prev: v.prev }),
            };
        });
}

/** @internal */
export namespace GetTripsTripsResponseBody$ {
    export type Inbound = {
        data?: Array<components.Trip$.Inbound> | undefined;
        links?: GetTripsTripsLinks$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTripsTripsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(components.Trip$.inboundSchema).optional(),
            links: z.lazy(() => GetTripsTripsLinks$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });

    export type Outbound = {
        data?: Array<components.Trip$.Outbound> | undefined;
        links?: GetTripsTripsLinks$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTripsTripsResponseBody> = z
        .object({
            data: z.array(components.Trip$.outboundSchema).optional(),
            links: z.lazy(() => GetTripsTripsLinks$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });
}

/** @internal */
export namespace GetTripsLinks$ {
    export type Inbound = {
        self?: string | undefined;
        next?: string | undefined;
        prev?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetTripsLinks, z.ZodTypeDef, Inbound> = z
        .object({
            self: z.string().optional(),
            next: z.string().optional(),
            prev: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.self === undefined ? null : { self: v.self }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.prev === undefined ? null : { prev: v.prev }),
            };
        });

    export type Outbound = {
        self?: string | undefined;
        next?: string | undefined;
        prev?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTripsLinks> = z
        .object({
            self: z.string().optional(),
            next: z.string().optional(),
            prev: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.self === undefined ? null : { self: v.self }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.prev === undefined ? null : { prev: v.prev }),
            };
        });
}

/** @internal */
export namespace GetTripsResponseBody$ {
    export type Inbound = {
        data?: Array<components.Trip$.Inbound> | undefined;
        links?: GetTripsLinks$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTripsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(components.Trip$.inboundSchema).optional(),
            links: z.lazy(() => GetTripsLinks$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });

    export type Outbound = {
        data?: Array<components.Trip$.Outbound> | undefined;
        links?: GetTripsLinks$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTripsResponseBody> = z
        .object({
            data: z.array(components.Trip$.outboundSchema).optional(),
            links: z.lazy(() => GetTripsLinks$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });
}

/** @internal */
export namespace GetTripsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "200_application/json_object"?: GetTripsResponseBody$.Inbound | undefined;
        Body?: Uint8Array | string | undefined;
        Headers: Record<string, Array<string>>;
    };

    export const inboundSchema: z.ZodType<GetTripsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "200_application/json_object": z
                .lazy(() => GetTripsResponseBody$.inboundSchema)
                .optional(),
            Body: b64$.zodInbound.optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["200_application/json_object"] === undefined
                    ? null
                    : { twoHundredApplicationJsonObject: v["200_application/json_object"] }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "200_application/json_object"?: GetTripsResponseBody$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        Headers: Record<string, Array<string>>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTripsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            twoHundredApplicationJsonObject: z
                .lazy(() => GetTripsResponseBody$.outboundSchema)
                .optional(),
            body: b64$.zodOutbound.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.twoHundredApplicationJsonObject === undefined
                    ? null
                    : { "200_application/json_object": v.twoHundredApplicationJsonObject }),
                ...(v.body === undefined ? null : { Body: v.body }),
                Headers: v.headers,
            };
        });
}
