/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

export type GetStationsLinks = {
    self?: string | undefined;
    next?: string | undefined;
    prev?: string | undefined;
};

/**
 * This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS).
 */
export type GetStationsStationsResponseBody = {
    data?: Array<components.Station> | undefined;
    links?: GetStationsLinks | undefined;
};

export type Links = {
    self?: string | undefined;
    next?: string | undefined;
    prev?: string | undefined;
};

/**
 * This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS).
 */
export type GetStationsResponseBody = {
    data?: Array<components.Station> | undefined;
    links?: Links | undefined;
};

export type GetStationsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A list of train stations
     */
    twoHundredApplicationJsonObject?: GetStationsResponseBody | undefined;
    body?: Uint8Array | string | undefined;
    headers: Record<string, Array<string>>;
};

/** @internal */
export namespace GetStationsLinks$ {
    export type Inbound = {
        self?: string | undefined;
        next?: string | undefined;
        prev?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetStationsLinks, z.ZodTypeDef, Inbound> = z
        .object({
            self: z.string().optional(),
            next: z.string().optional(),
            prev: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.self === undefined ? null : { self: v.self }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.prev === undefined ? null : { prev: v.prev }),
            };
        });

    export type Outbound = {
        self?: string | undefined;
        next?: string | undefined;
        prev?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStationsLinks> = z
        .object({
            self: z.string().optional(),
            next: z.string().optional(),
            prev: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.self === undefined ? null : { self: v.self }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.prev === undefined ? null : { prev: v.prev }),
            };
        });
}

/** @internal */
export namespace GetStationsStationsResponseBody$ {
    export type Inbound = {
        data?: Array<components.Station$.Inbound> | undefined;
        links?: GetStationsLinks$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetStationsStationsResponseBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                data: z.array(components.Station$.inboundSchema).optional(),
                links: z.lazy(() => GetStationsLinks$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.data === undefined ? null : { data: v.data }),
                    ...(v.links === undefined ? null : { links: v.links }),
                };
            });

    export type Outbound = {
        data?: Array<components.Station$.Outbound> | undefined;
        links?: GetStationsLinks$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetStationsStationsResponseBody
    > = z
        .object({
            data: z.array(components.Station$.outboundSchema).optional(),
            links: z.lazy(() => GetStationsLinks$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });
}

/** @internal */
export namespace Links$ {
    export type Inbound = {
        self?: string | undefined;
        next?: string | undefined;
        prev?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Links, z.ZodTypeDef, Inbound> = z
        .object({
            self: z.string().optional(),
            next: z.string().optional(),
            prev: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.self === undefined ? null : { self: v.self }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.prev === undefined ? null : { prev: v.prev }),
            };
        });

    export type Outbound = {
        self?: string | undefined;
        next?: string | undefined;
        prev?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Links> = z
        .object({
            self: z.string().optional(),
            next: z.string().optional(),
            prev: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.self === undefined ? null : { self: v.self }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.prev === undefined ? null : { prev: v.prev }),
            };
        });
}

/** @internal */
export namespace GetStationsResponseBody$ {
    export type Inbound = {
        data?: Array<components.Station$.Inbound> | undefined;
        links?: Links$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetStationsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(components.Station$.inboundSchema).optional(),
            links: z.lazy(() => Links$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });

    export type Outbound = {
        data?: Array<components.Station$.Outbound> | undefined;
        links?: Links$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStationsResponseBody> = z
        .object({
            data: z.array(components.Station$.outboundSchema).optional(),
            links: z.lazy(() => Links$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });
}

/** @internal */
export namespace GetStationsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "200_application/json_object"?: GetStationsResponseBody$.Inbound | undefined;
        Body?: Uint8Array | string | undefined;
        Headers: Record<string, Array<string>>;
    };

    export const inboundSchema: z.ZodType<GetStationsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "200_application/json_object": z
                .lazy(() => GetStationsResponseBody$.inboundSchema)
                .optional(),
            Body: b64$.zodInbound.optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["200_application/json_object"] === undefined
                    ? null
                    : { twoHundredApplicationJsonObject: v["200_application/json_object"] }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "200_application/json_object"?: GetStationsResponseBody$.Outbound | undefined;
        Body?: Uint8Array | undefined;
        Headers: Record<string, Array<string>>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStationsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            twoHundredApplicationJsonObject: z
                .lazy(() => GetStationsResponseBody$.outboundSchema)
                .optional(),
            body: b64$.zodOutbound.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.twoHundredApplicationJsonObject === undefined
                    ? null
                    : { "200_application/json_object": v.twoHundredApplicationJsonObject }),
                ...(v.body === undefined ? null : { Body: v.body }),
                Headers: v.headers,
            };
        });
}
